return {
  {
    'catppuccin/nvim',
    enabled = false,
    priority = 1000,
    name = 'catppuccin',
    config = function()
      require('catppuccin').setup {
        background = {
          light = 'latte',
          dark = 'mocha',
        },
        color_overrides = {
          latte = {
            rosewater = '#c14a4a',
            flamingo = '#c14a4a',
            red = '#c14a4a',
            maroon = '#c14a4a',
            -- pink = '#945e80',
            pink = '#945e80',
            -- mauve = '#945e80',
            mauve = '#947fb8',
            peach = '#c35e0a',
            yellow = '#b47109',
            green = '#6c782e',
            teal = '#4c7a5d',
            sky = '#4c7a5d',
            sapphire = '#4c7a5d',
            -- blue = '#45707a',
            blue = '#7eb4c9',
            -- lavender = '#45707a',947fb8
            lavender = '#947fb8',
            text = '#654735',
            subtext1 = '#73503c',
            subtext0 = '#805942',
            overlay2 = '#8c6249',
            overlay1 = '#8c856d',
            overlay0 = '#a69d81',
            surface2 = '#bfb695',
            surface1 = '#d1c7a3',
            surface0 = '#e3dec3',
            base = '#f9f5d7',
            mantle = '#f0ebce',
            crust = '#e8e3c8',
          },
          mocha = {
            rosewater = '#ea6962',
            flamingo = '#ea6962',
            red = '#ea6962',
            maroon = '#ea6962',
            pink = '#d3869b',
            mauve = '#947fb8',
            peach = '#e78a4e',
            yellow = '#d8a657',
            green = '#a9b665',
            teal = '#89b482',
            sky = '#89b482',
            sapphire = '#89b482',
            blue = '#7eb4c9',
            lavender = '#7daea3',
            text = '#ebdbb2',
            subtext1 = '#d5c4a1',
            subtext0 = '#bdae93',
            overlay2 = '#a89984',
            overlay1 = '#928374',
            overlay0 = '#595959',
            surface2 = '#4d4d4d',
            surface1 = '#404040',
            surface0 = '#292929',
            -- base = '#1d2021',
            base = '#212121',
            mantle = '#191b1c',
            crust = '#141617',
          },
        },
        transparent_background = false,
        show_end_of_buffer = false,
        integration_default = false,
        -- no_bold = true,
        -- no_italic = true,
        -- no_underline = true,
        integrations = {
          blink_cmp = {
            style = 'bordered',
          },
          snacks = {
            enabled = true,
          },
          cmp = true,
          gitsigns = true,
          native_lsp = { enabled = true, inlay_hints = { background = false } },
          -- semantic_tokens = true,
          treesitter = true,
          treesitter_context = true,
          which_key = true,
          mason = true,
          telescope = {
            enabled = true,
            style = 'nvchad',
          },
        },
        highlight_overrides = {
          all = function(colors)
            return {

              -- Telescope file-explorer styling
              TelescopeNormal = { bg = colors.mantle },
              TelescopeBorder = { fg = colors.surface1, bg = colors.mantle },
              TelescopePromptNormal = { bg = colors.surface0 },
              TelescopePromptBorder = { fg = colors.surface0, bg = colors.surface0 },
              TelescopePromptPrefix = { fg = colors.blue, bg = colors.surface0 },
              TelescopeResultsNormal = { bg = colors.base },
              TelescopeResultsBorder = { fg = colors.surface1, bg = colors.base },
              TelescopePreviewNormal = { bg = colors.base },
              TelescopePreviewBorder = { fg = colors.surface1, bg = colors.base },

              -- Completion menu styling
              Pmenu = { bg = colors.mantle, fg = colors.text },
              PmenuSel = { bg = colors.surface0, fg = colors.text },
              PmenuSbar = { bg = colors.surface0 },
              PmenuThumb = { bg = colors.surface2 },
              PmenuExtra = { bg = colors.mantle, fg = colors.subtext1 },

              -- Floating windows
              NormalFloat = { bg = colors.mantle },
              FloatBorder = { bg = colors.mantle, fg = colors.surface2 },
              FloatTitle = { bg = colors.mantle, fg = colors.text },
              --
              -- === Neovim CmdLine ===
              CmdLine = { bg = colors.base, fg = colors.text },
              CmdLineSeparator = { bg = colors.base, fg = colors.text },
              CmdLineFill = { bg = colors.base },
              CmdLinePrompt = { bg = colors.base, fg = colors.text },

              -- === Noice (if installed) ===
              NoiceCmdlinePopup = { bg = colors.base },
              NoiceCmdlinePopupBorder = { bg = colors.base, fg = colors.blue },
              NoiceCmdlinePopupTitle = { bg = colors.base, fg = colors.blue },
              NoiceCmdlinePopupPrompt = { bg = colors.base, fg = colors.text },

              -- -- Blink.cmp specific highlighting
              -- BlinkCmpMenu = { bg = colors.mantle, fg = colors.text },
              -- BlinkCmpMenuBorder = { bg = colors.mantle, fg = colors.surface2 },
              -- BlinkCmpMenuSelection = { bg = colors.surface0, fg = colors.text },
              -- BlinkCmpScrollBarThumb = { bg = colors.surface2 },
              -- BlinkCmpScrollBarGutter = { bg = colors.surface0 },
              -- BlinkCmpLabel = { bg = colors.mantle, fg = colors.text },
              -- BlinkCmpLabelDeprecated = { bg = colors.mantle, fg = colors.overlay0, strikethrough = true },
              -- BlinkCmpLabelDetail = { bg = colors.mantle, fg = colors.subtext1 },
              -- BlinkCmpLabelDescription = { bg = colors.mantle, fg = colors.subtext1 },
              -- BlinkCmpKind = { bg = colors.mantle, fg = colors.peach },
              -- BlinkCmpSource = { bg = colors.mantle, fg = colors.overlay1 },
              -- BlinkCmpGhostText = { fg = colors.overlay0, italic = true },
              -- BlinkCmpDoc = { bg = colors.mantle, fg = colors.text },
              -- BlinkCmpDocBorder = { bg = colors.mantle, fg = colors.surface2 },
              -- BlinkCmpDocSeparator = { bg = colors.mantle, fg = colors.surface1 },
              -- BlinkCmpDocCursorLine = { bg = colors.surface0 },
              -- BlinkCmpSignatureHelp = { bg = colors.mantle, fg = colors.text },
              -- BlinkCmpSignatureHelpBorder = { bg = colors.mantle, fg = colors.surface2 },
              -- BlinkCmpSignatureHelpActiveParameter = { bg = colors.surface0, fg = colors.peach, bold = true },

              -- -- Snacks.nvim picker NvChad style
              -- SnacksPicker = { bg = colors.base },
              -- SnacksPickerBorder = { fg = colors.surface0, bg = colors.base },
              -- SnacksPickerPreview = { bg = colors.base },
              -- SnacksPickerPreviewBorder = { fg = colors.base, bg = colors.base },
              -- SnacksPickerPreviewTitle = { fg = colors.base, bg = colors.green },
              -- SnacksPickerBoxBorder = { fg = colors.base, bg = colors.base },
              -- SnacksPickerInputBorder = { fg = colors.surface2, bg = colors.base },
              -- SnacksPickerInputSearch = { fg = colors.text, bg = colors.base },
              -- SnacksPickerList = { bg = colors.base },
              -- SnacksPickerListBorder = { fg = colors.base, bg = colors.base },
              -- SnacksPickerListTitle = { fg = colors.base, bg = colors.base },
              --
              -- -- Additional picker elements
              -- SnacksPickerDir = { fg = colors.blue },
              -- SnacksPickerFile = { fg = colors.text },
              -- SnacksPickerMatch = { fg = colors.peach, bold = true },
              -- SnacksPickerCursor = { bg = colors.surface0, fg = colors.text },
              -- SnacksPickerSelected = { bg = colors.surface0, fg = colors.text },
              -- SnacksPickerIcon = { fg = colors.blue },
              -- SnacksPickerSource = { fg = colors.overlay1 },
              -- SnacksPickerCount = { fg = colors.overlay1 },
              -- SnacksPickerFooter = { fg = colors.overlay1 },
              -- SnacksPickerHeader = { fg = colors.text, bold = true },
              -- SnacksPickerSpecial = { fg = colors.peach },
              -- SnacksPickerIndent = { fg = colors.surface1 },
              -- SnacksPickerMulti = { fg = colors.peach },
              -- SnacksPickerTitle = { fg = colors.text, bold = true },
              -- SnacksPickerPrompt = { fg = colors.text },
              --
              -- -- Snacks core components
              -- SnacksNotifierNormal = { bg = colors.mantle, fg = colors.text },
              -- SnacksNotifierBorder = { bg = colors.mantle, fg = colors.surface2 },
              -- SnacksNotifierTitle = { bg = colors.mantle, fg = colors.text, bold = true },
              -- SnacksNotifierIcon = { bg = colors.mantle, fg = colors.blue },
              -- SnacksNotifierIconInfo = { bg = colors.mantle, fg = colors.blue },
              -- SnacksNotifierIconWarn = { bg = colors.mantle, fg = colors.yellow },
              -- SnacksNotifierIconError = { bg = colors.mantle, fg = colors.red },
              --
              -- Snacks Dashboard
              SnacksDashboardNormal = { bg = colors.base, fg = colors.text },
              SnacksDashboardDesc = { bg = colors.base, fg = colors.subtext1 },
              SnacksDashboardFile = { bg = colors.base, fg = colors.text },
              SnacksDashboardDir = { bg = colors.base, fg = colors.blue },
              SnacksDashboardFooter = { bg = colors.base, fg = colors.overlay1 },
              SnacksDashboardHeader = { bg = colors.base, fg = colors.text, bold = true },
              SnacksDashboardIcon = { bg = colors.base, fg = colors.blue },
              SnacksDashboardKey = { bg = colors.base, fg = colors.peach },
              SnacksDashboardTerminal = { bg = colors.base, fg = colors.text },
              SnacksDashboardSpecial = { bg = colors.base, fg = colors.peach },
              --
              -- -- Snacks Terminal
              -- SnacksTerminalNormal = { bg = colors.mantle, fg = colors.text },
              -- SnacksTerminalBorder = { bg = colors.mantle, fg = colors.surface2 },
              -- SnacksTerminalTitle = { bg = colors.mantle, fg = colors.text, bold = true },
              --
              CmpItemMenu = { fg = colors.surface2 },
              CursorLineNr = { fg = colors.text },
              GitSignsChange = { fg = colors.peach },
              LineNr = { fg = colors.overlay0 },
              LspInfoBorder = { link = 'FloatBorder' },
              VertSplit = { bg = colors.base, fg = colors.surface0 },
              WhichKeyFloat = { bg = colors.mantle },
              YankHighlight = { bg = colors.surface2 },
              -- FidgetTask = { fg = colors.subtext1 },
              -- FidgetTitle = { fg = colors.peach },

              IblIndent = { fg = colors.surface0 },
              IblScope = { fg = colors.overlay0 },

              Boolean = { fg = colors.mauve },
              Number = { fg = colors.mauve },
              Float = { fg = colors.mauve },

              PreProc = { fg = colors.mauve },
              PreCondit = { fg = colors.mauve },
              Include = { fg = colors.mauve },
              Define = { fg = colors.mauve },
              Conditional = { fg = colors.red },
              Repeat = { fg = colors.red },
              Keyword = { fg = colors.red },
              Typedef = { fg = colors.red },
              Exception = { fg = colors.red },
              Statement = { fg = colors.red },

              Error = { fg = colors.red },
              StorageClass = { fg = colors.peach },
              Tag = { fg = colors.peach },
              Label = { fg = colors.peach },
              Structure = { fg = colors.peach },
              Operator = { fg = colors.peach },
              Title = { fg = colors.peach },
              Special = { fg = colors.yellow },
              SpecialChar = { fg = colors.yellow },
              Type = { fg = colors.yellow, style = { 'bold' } },
              Function = { fg = colors.green, style = { 'bold' } },
              Delimiter = { fg = colors.subtext1 },
              Ignore = { fg = colors.subtext1 },
              Macro = { fg = colors.teal },

              TSAnnotation = { fg = colors.mauve },
              TSAttribute = { fg = colors.mauve },
              TSBoolean = { fg = colors.mauve },
              TSCharacter = { fg = colors.teal },
              TSCharacterSpecial = { link = 'SpecialChar' },
              TSComment = { link = 'Comment', style = { 'italic' } },
              TSConditional = { fg = colors.red },
              TSConstBuiltin = { fg = colors.mauve },
              TSConstMacro = { fg = colors.mauve },
              TSConstant = { fg = colors.text },
              TSConstructor = { fg = colors.green },
              TSDebug = { link = 'Debug' },
              TSDefine = { link = 'Define' },
              TSEnvironment = { link = 'Macro' },
              TSEnvironmentName = { link = 'Type' },
              TSError = { link = 'Error' },
              TSException = { fg = colors.red },
              TSField = { fg = colors.blue },
              TSFloat = { fg = colors.mauve },
              TSFuncBuiltin = { fg = colors.green },
              TSFuncMacro = { fg = colors.green },
              TSFunction = { fg = colors.green },
              TSFunctionCall = { fg = colors.green },
              TSInclude = { fg = colors.red },
              TSKeyword = { fg = colors.red },
              TSKeywordFunction = { fg = colors.red },
              TSKeywordOperator = { fg = colors.peach },
              TSKeywordReturn = { fg = colors.red },
              TSLabel = { fg = colors.peach },
              TSLiteral = { link = 'String' },
              TSMath = { fg = colors.blue },
              TSMethod = { fg = colors.green },
              TSMethodCall = { fg = colors.green },
              TSNamespace = { fg = colors.yellow },
              TSNone = { fg = colors.text },
              TSNumber = { fg = colors.mauve },
              TSOperator = { fg = colors.peach },
              TSParameter = { fg = colors.text },
              TSParameterReference = { fg = colors.text },
              TSPreProc = { link = 'PreProc' },
              TSProperty = { fg = colors.blue },
              TSPunctBracket = { fg = colors.text },
              TSPunctDelimiter = { link = 'Delimiter' },
              TSPunctSpecial = { fg = colors.blue },
              TSRepeat = { fg = colors.red },
              TSStorageClass = { fg = colors.peach },
              TSStorageClassLifetime = { fg = colors.peach },
              TSStrike = { fg = colors.subtext1 },
              TSString = { fg = colors.teal },
              TSStringEscape = { fg = colors.green },
              TSStringRegex = { fg = colors.green },
              TSStringSpecial = { link = 'SpecialChar' },
              TSSymbol = { fg = colors.text },
              TSTag = { fg = colors.peach },
              TSTagAttribute = { fg = colors.green },
              TSTagDelimiter = { fg = colors.green },
              TSText = { fg = colors.green },
              TSTextReference = { link = 'Constant' },
              TSTitle = { link = 'Title' },
              TSTodo = { link = 'Todo' },
              TSType = { fg = colors.yellow, style = { 'bold' } },
              TSTypeBuiltin = { fg = colors.yellow, style = { 'bold' } },
              TSTypeDefinition = { fg = colors.yellow, style = { 'bold' } },
              TSTypeQualifier = { fg = colors.peach, style = { 'bold' } },
              TSURI = { fg = colors.blue },
              TSVariable = { fg = colors.text },
              TSVariableBuiltin = { fg = colors.mauve },

              ['@annotation'] = { link = 'TSAnnotation' },
              ['@attribute'] = { link = 'TSAttribute' },
              ['@boolean'] = { link = 'TSBoolean' },
              ['@character'] = { link = 'TSCharacter' },
              ['@character.special'] = { link = 'TSCharacterSpecial' },
              ['@comment'] = { link = 'TSComment' },
              ['@conceal'] = { link = 'Grey' },
              ['@conditional'] = { link = 'TSConditional' },
              ['@constant'] = { link = 'TSConstant' },
              ['@constant.builtin'] = { link = 'TSConstBuiltin' },
              ['@constant.macro'] = { link = 'TSConstMacro' },
              ['@constructor'] = { link = 'TSConstructor' },
              ['@debug'] = { link = 'TSDebug' },
              ['@define'] = { link = 'TSDefine' },
              ['@error'] = { link = 'TSError' },
              ['@exception'] = { link = 'TSException' },
              ['@field'] = { link = 'TSField' },
              ['@float'] = { link = 'TSFloat' },
              ['@function'] = { link = 'TSFunction' },
              ['@function.builtin'] = { link = 'TSFuncBuiltin' },
              ['@function.call'] = { link = 'TSFunctionCall' },
              ['@function.macro'] = { link = 'TSFuncMacro' },
              ['@include'] = { link = 'TSInclude' },
              ['@keyword'] = { link = 'TSKeyword' },
              ['@keyword.function'] = { link = 'TSKeywordFunction' },
              ['@keyword.operator'] = { link = 'TSKeywordOperator' },
              ['@keyword.return'] = { link = 'TSKeywordReturn' },
              ['@label'] = { link = 'TSLabel' },
              ['@math'] = { link = 'TSMath' },
              ['@method'] = { link = 'TSMethod' },
              ['@method.call'] = { link = 'TSMethodCall' },
              ['@namespace'] = { link = 'TSNamespace' },
              ['@none'] = { link = 'TSNone' },
              ['@number'] = { link = 'TSNumber' },
              ['@operator'] = { link = 'TSOperator' },
              ['@parameter'] = { link = 'TSParameter' },
              ['@parameter.reference'] = { link = 'TSParameterReference' },
              ['@preproc'] = { link = 'TSPreProc' },
              ['@property'] = { link = 'TSProperty' },
              ['@punctuation.bracket'] = { link = 'TSPunctBracket' },
              ['@punctuation.delimiter'] = { link = 'TSPunctDelimiter' },
              ['@punctuation.special'] = { link = 'TSPunctSpecial' },
              ['@repeat'] = { link = 'TSRepeat' },
              ['@storageclass'] = { link = 'TSStorageClass' },
              ['@storageclass.lifetime'] = { link = 'TSStorageClassLifetime' },
              ['@strike'] = { link = 'TSStrike' },
              ['@string'] = { link = 'TSString' },
              ['@string.escape'] = { link = 'TSStringEscape' },
              ['@string.regex'] = { link = 'TSStringRegex' },
              ['@string.special'] = { link = 'TSStringSpecial' },
              ['@symbol'] = { link = 'TSSymbol' },
              ['@tag'] = { link = 'TSTag' },
              ['@tag.attribute'] = { link = 'TSTagAttribute' },
              ['@tag.delimiter'] = { link = 'TSTagDelimiter' },
              ['@text'] = { link = 'TSText' },
              ['@text.danger'] = { link = 'TSDanger' },
              ['@text.diff.add'] = { link = 'diffAdded' },
              ['@text.diff.delete'] = { link = 'diffRemoved' },
              ['@text.emphasis'] = { link = 'TSEmphasis' },
              ['@text.environment'] = { link = 'TSEnvironment' },
              ['@text.environment.name'] = { link = 'TSEnvironmentName' },
              ['@text.literal'] = { link = 'TSLiteral' },
              ['@text.math'] = { link = 'TSMath' },
              ['@text.note'] = { link = 'TSNote' },
              ['@text.reference'] = { link = 'TSTextReference' },
              ['@text.strike'] = { link = 'TSStrike' },
              ['@text.strong'] = { link = 'TSStrong' },
              ['@text.title'] = { link = 'TSTitle' },
              ['@text.todo'] = { link = 'TSTodo' },
              ['@text.todo.checked'] = { link = 'Green' },
              ['@text.todo.unchecked'] = { link = 'Ignore' },
              ['@text.underline'] = { link = 'TSUnderline' },
              ['@text.uri'] = { link = 'TSURI' },
              ['@text.warning'] = { link = 'TSWarning' },
              ['@todo'] = { link = 'TSTodo' },
              ['@type'] = { link = 'TSType' },
              ['@type.builtin'] = { link = 'TSTypeBuiltin' },
              ['@type.definition'] = { link = 'TSTypeDefinition' },
              ['@type.qualifier'] = { link = 'TSTypeQualifier' },
              ['@uri'] = { link = 'TSURI' },
              ['@variable'] = { link = 'TSVariable' },
              ['@variable.builtin'] = { link = 'TSVariableBuiltin' },

              ['@lsp.type.class'] = { link = 'TSType' },
              ['@lsp.type.comment'] = { link = 'TSComment' },
              ['@lsp.type.decorator'] = { link = 'TSFunction' },
              ['@lsp.type.enum'] = { link = 'TSType' },
              ['@lsp.type.enumMember'] = { link = 'TSProperty' },
              ['@lsp.type.events'] = { link = 'TSLabel' },
              ['@lsp.type.function'] = { link = 'TSFunction' },
              ['@lsp.type.interface'] = { link = 'TSType' },
              ['@lsp.type.keyword'] = { link = 'TSKeyword' },
              ['@lsp.type.macro'] = { link = 'TSConstMacro' },
              ['@lsp.type.method'] = { link = 'TSMethod' },
              ['@lsp.type.modifier'] = { link = 'TSTypeQualifier' },
              ['@lsp.type.namespace'] = { link = 'TSNamespace' },
              ['@lsp.type.number'] = { link = 'TSNumber' },
              ['@lsp.type.operator'] = { link = 'TSOperator' },
              ['@lsp.type.parameter'] = { link = 'TSParameter' },
              ['@lsp.type.property'] = { link = 'TSProperty' },
              ['@lsp.type.regexp'] = { link = 'TSStringRegex' },
              ['@lsp.type.string'] = { link = 'TSString' },
              ['@lsp.type.struct'] = { link = 'TSType' },
              ['@lsp.type.type'] = { link = 'TSType' },
              ['@lsp.type.typeParameter'] = { link = 'TSTypeDefinition' },
              ['@lsp.type.variable'] = { link = 'TSVariable' },
            }
          end,
          latte = function(colors)
            return {
              IblIndent = { fg = colors.mantle },
              IblScope = { fg = colors.surface1 },
              LineNr = { fg = colors.surface1 },
            }
          end,
        },
      }

      vim.api.nvim_command 'colorscheme catppuccin'
    end,
  },
}
-- return {
--   {
--     'rebelot/kanagawa.nvim',
--     lazy = false, -- load immediately on startup
--     priority = 1000, -- ensure it loads before other plugins
--     config = function()
--       require('kanagawa').setup {
--         compile = false,
--         undercurl = true,
--         commentStyle = { italic = true },
--         functionStyle = {},
--         keywordStyle = { italic = true },
--         statementStyle = { bold = true },
--         typeStyle = {},
--         transparent = false,
--         dimInactive = false,
--         terminalColors = true,
--         theme = 'dragon', -- or "wave", "dragon", "lotus"
--         background = {
--           dark = 'dragon', -- style to use when `background` is "dark"
--           light = 'lotus', -- style to use when `background` is "light"
--         },
--         overrides = function(colors)
--           local theme = colors.theme
--           return {
--             -- Telescope integration
--             TelescopeTitle = { fg = theme.ui.special, bold = true },
--             TelescopePromptNormal = { bg = theme.ui.bg_p1 },
--             TelescopePromptBorder = { fg = theme.ui.bg_p1, bg = theme.ui.bg_p1 },
--             TelescopeResultsNormal = { fg = theme.ui.fg_dim, bg = theme.ui.bg_m1 },
--             TelescopeResultsBorder = { fg = theme.ui.bg_m1, bg = theme.ui.bg_m1 },
--             TelescopePreviewNormal = { bg = theme.ui.bg_dim },
--             TelescopePreviewBorder = { bg = theme.ui.bg_dim, fg = theme.ui.bg_dim },
--           }
--         end,
--         colors = {
--           palette = {
--             -- === Palette Overrides ===
--             sumiInk0 = '#1f1f28',
--             sumiInk1 = '#2a2a37',
--             sumiInk2 = '#363646',
--             sumiInk3 = '#54546d',
--             sumiInk4 = '#727169',
--             fujiWhite = '#dcd7ba',
--             oldWhite = '#c8c093',
--             waveBlue1 = '#223249',
--             waveBlue2 = '#2d4f67',
--             winterGreen = '#2b3328',
--             winterYellow = '#49443c',
--             winterRed = '#43242b',
--             winterBlue = '#252535',
--             autumnGreen = '#76946a',
--             autumnRed = '#c34043',
--             autumnYellow = '#dca561',
--             samuraiRed = '#e82424',
--             roninYellow = '#ff9e3b',
--             waveAqua1 = '#6a9589',
--             dragonBlue = '#658594',
--             springGreen = '#98bb6c',
--             springBlue = '#7e9cd8',
--             springViolet1 = '#938aa9',
--             springViolet2 = '#9cabca',
--             springYellow = '#dca561',
--             boatYellow1 = '#938056',
--             boatYellow2 = '#c0a36e',
--             carpYellow = '#e6c384',
--             sakuraPink = '#d27e99',
--             waveRed = '#e46876',
--             peachRed = '#ff5d62',
--             surimiOrange = '#ffa066',
--             katanaGray = '#717c7c',
--             dragonBlack0 = '#0d0c0c',
--           },
--         },
--       }
--
--       -- Activate the colorscheme
--       vim.cmd 'colorscheme kanagawa'
--     end,
--   },
-- }
-- --
